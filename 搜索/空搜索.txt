GET /_search

{
  "took" : 13,
  "timed_out" : false,
  "_shards" : {
    "total" : 5,
    "successful" : 5,
    "failed" : 0
  },
  "hits" : {
    "total" : 19,
    "max_score" : 1.0,
    "hits" : [ {
      "_index" : "myindex",
      "_type" : "test",
      "_id" : "14",
      "_score" : 1.0,
      "_source" : {
        "id" : 14,
        "access_token" : "ccc100840aafb704c779b149d9b30bc7",
        "password" : "15e5d605ed44252251",
        "phone" : "185",
        "verify_code" : 5460,
        "type" : "ad",
        "token" : "eb835714979739e5967",
        "time" : "2016-09-14 17:14:45",
        "nickname" : "xxxxx",
        "touxiang" : "haha.jpg",
        "change_name" : "yes",
        "area" : "大陆",
        "quhao" : "+86",
        "openid" : "oxxxjMnRK4D0RvUqWOfLMQM+++"
      }
    }


    hits编辑
返回结果中最重要的部分是 hits ，它 包含 total 字段来表示匹配到的文档总数，并且一个 hits 数组包含所查询结果的前十个文档。

在 hits 数组中每个结果包含文档的 _index 、 _type 、 _id ，加上 _source 字段。这意味着我们可以直接从返回的搜索结果中使用整个文档。这不像其他的搜索引擎，仅仅返回文档的ID，需要你单独去获取文档。

每个结果还有一个 _score ，它衡量了文档与查询的匹配程度。默认情况下，首先返回最相关的文档结果，就是说，返回的文档是按照 _score 降序排列的。在这个例子中，我们没有指定任何查询，故所有的文档具有相同的相关性，因此对所有的结果而言 1 是中性的 _score 。

max_score 值是与查询所匹配文档的 _score 的最大值。

took编辑
took 值告诉我们执行整个搜索请求耗费了多少毫秒。

shards编辑
_shards 部分 告诉我们在查询中参与分片的总数，以及这些分片成功了多少个失败了多少个。正常情况下我们不希望分片失败，但是分片失败是可能发生的。如果我们遭遇到一种灾难级别的故障，在这个故障中丢失了相同分片的原始数据和副本，那么对这个分片将没有可用副本来对搜索请求作出响应。假若这样，Elasticsearch 将报告这个分片是失败的，但是会继续返回剩余分片的结果。